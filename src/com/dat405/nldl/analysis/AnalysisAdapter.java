/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.dat405.nldl.analysis;

import java.util.*;
import com.dat405.nldl.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARouterDeviceDcl(ARouterDeviceDcl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASegmentDeviceDcl(ASegmentDeviceDcl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVar(AVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASettingDcl(ASettingDcl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASettingBlock(ASettingBlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentifierS(AIdentifierS node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstantS(AConstantS node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGroupDcl(AGroupDcl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumV(ANumV node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringV(AStringV node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIpV(AIpV node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariablesGroupBlock(AVariablesGroupBlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASettingGroupBlock(ASettingGroupBlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGroupGroupBlock(AGroupGroupBlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConnectionGroupBlock(AConnectionGroupBlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIpGroupBlock(AIpGroupBlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssGroupBlock(AAssGroupBlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARrConnectionDcl(ARrConnectionDcl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARsConnectionDcl(ARsConnectionDcl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiConnectionDcl(AMultiConnectionDcl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATwoIf(ATwoIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOneIf(AOneIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConnector(AConnector node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFourIp(AFourIp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAThreeIp(AThreeIp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATwoIp(ATwoIp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOneIp(AOneIp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRouter(TRouter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGroup(TGroup node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSegment(TSegment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSettings(TSettings node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSetting(TSetting node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConnection(TConnection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIpKeyword(TIpKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMain(TMain node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInterfaceType(TInterfaceType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTProtocol(TProtocol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConst(TConst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLParenthesis(TLParenthesis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRParenthesis(TRParenthesis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBracket(TLBracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBracket(TRBracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTArrow(TArrow node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSlash(TSlash node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
