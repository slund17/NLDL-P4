/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.dat405.nldl.analysis;

import com.dat405.nldl.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseARouterDeviceDcl(ARouterDeviceDcl node);
    void caseASegmentDeviceDcl(ASegmentDeviceDcl node);
    void caseAVar(AVar node);
    void caseASettingDcl(ASettingDcl node);
    void caseASettingBlock(ASettingBlock node);
    void caseAIdentifierS(AIdentifierS node);
    void caseAConstantS(AConstantS node);
    void caseAGroupDcl(AGroupDcl node);
    void caseANumV(ANumV node);
    void caseAStringV(AStringV node);
    void caseAIpV(AIpV node);
    void caseAVariablesGroupBlock(AVariablesGroupBlock node);
    void caseASettingGroupBlock(ASettingGroupBlock node);
    void caseAGroupGroupBlock(AGroupGroupBlock node);
    void caseAConnectionGroupBlock(AConnectionGroupBlock node);
    void caseAIpGroupBlock(AIpGroupBlock node);
    void caseAAssGroupBlock(AAssGroupBlock node);
    void caseARrConnectionDcl(ARrConnectionDcl node);
    void caseARsConnectionDcl(ARsConnectionDcl node);
    void caseAMultiConnectionDcl(AMultiConnectionDcl node);
    void caseATwoIf(ATwoIf node);
    void caseAOneIf(AOneIf node);
    void caseAConnector(AConnector node);
    void caseAFourIp(AFourIp node);
    void caseAThreeIp(AThreeIp node);
    void caseATwoIp(ATwoIp node);
    void caseAOneIp(AOneIp node);

    void caseTRouter(TRouter node);
    void caseTGroup(TGroup node);
    void caseTSegment(TSegment node);
    void caseTSettings(TSettings node);
    void caseTSetting(TSetting node);
    void caseTConnection(TConnection node);
    void caseTIpKeyword(TIpKeyword node);
    void caseTMain(TMain node);
    void caseTDot(TDot node);
    void caseTInterfaceType(TInterfaceType node);
    void caseTProtocol(TProtocol node);
    void caseTConst(TConst node);
    void caseTEqual(TEqual node);
    void caseTLParenthesis(TLParenthesis node);
    void caseTRParenthesis(TRParenthesis node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTArrow(TArrow node);
    void caseTSlash(TSlash node);
    void caseTSemi(TSemi node);
    void caseTComma(TComma node);
    void caseTBlank(TBlank node);
    void caseTString(TString node);
    void caseTComment(TComment node);
    void caseTIdentifier(TIdentifier node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
