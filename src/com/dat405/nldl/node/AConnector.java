/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.dat405.nldl.node;

import com.dat405.nldl.analysis.*;

@SuppressWarnings("nls")
public final class AConnector extends PConnector
{
    private PVar _var_;
    private PIp _ip_;
    private TConst _const_;
    private PIf _if_;

    public AConnector()
    {
        // Constructor
    }

    public AConnector(
        @SuppressWarnings("hiding") PVar _var_,
        @SuppressWarnings("hiding") PIp _ip_,
        @SuppressWarnings("hiding") TConst _const_,
        @SuppressWarnings("hiding") PIf _if_)
    {
        // Constructor
        setVar(_var_);

        setIp(_ip_);

        setConst(_const_);

        setIf(_if_);

    }

    @Override
    public Object clone()
    {
        return new AConnector(
            cloneNode(this._var_),
            cloneNode(this._ip_),
            cloneNode(this._const_),
            cloneNode(this._if_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConnector(this);
    }

    public PVar getVar()
    {
        return this._var_;
    }

    public void setVar(PVar node)
    {
        if(this._var_ != null)
        {
            this._var_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._var_ = node;
    }

    public PIp getIp()
    {
        return this._ip_;
    }

    public void setIp(PIp node)
    {
        if(this._ip_ != null)
        {
            this._ip_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ip_ = node;
    }

    public TConst getConst()
    {
        return this._const_;
    }

    public void setConst(TConst node)
    {
        if(this._const_ != null)
        {
            this._const_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._const_ = node;
    }

    public PIf getIf()
    {
        return this._if_;
    }

    public void setIf(PIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._var_)
            + toString(this._ip_)
            + toString(this._const_)
            + toString(this._if_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._var_ == child)
        {
            this._var_ = null;
            return;
        }

        if(this._ip_ == child)
        {
            this._ip_ = null;
            return;
        }

        if(this._const_ == child)
        {
            this._const_ = null;
            return;
        }

        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._var_ == oldChild)
        {
            setVar((PVar) newChild);
            return;
        }

        if(this._ip_ == oldChild)
        {
            setIp((PIp) newChild);
            return;
        }

        if(this._const_ == oldChild)
        {
            setConst((TConst) newChild);
            return;
        }

        if(this._if_ == oldChild)
        {
            setIf((PIf) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
