/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.dat405.nldl.node;

import java.util.*;
import com.dat405.nldl.analysis.*;

@SuppressWarnings("nls")
public final class AGroupDcl extends PGroupDcl
{
    private PVar _var_;
    private final LinkedList<PGroupBlock> _groupBlock_ = new LinkedList<PGroupBlock>();

    public AGroupDcl()
    {
        // Constructor
    }

    public AGroupDcl(
        @SuppressWarnings("hiding") PVar _var_,
        @SuppressWarnings("hiding") List<?> _groupBlock_)
    {
        // Constructor
        setVar(_var_);

        setGroupBlock(_groupBlock_);

    }

    @Override
    public Object clone()
    {
        return new AGroupDcl(
            cloneNode(this._var_),
            cloneList(this._groupBlock_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAGroupDcl(this);
    }

    public PVar getVar()
    {
        return this._var_;
    }

    public void setVar(PVar node)
    {
        if(this._var_ != null)
        {
            this._var_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._var_ = node;
    }

    public LinkedList<PGroupBlock> getGroupBlock()
    {
        return this._groupBlock_;
    }

    public void setGroupBlock(List<?> list)
    {
        for(PGroupBlock e : this._groupBlock_)
        {
            e.parent(null);
        }
        this._groupBlock_.clear();

        for(Object obj_e : list)
        {
            PGroupBlock e = (PGroupBlock) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._groupBlock_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._var_)
            + toString(this._groupBlock_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._var_ == child)
        {
            this._var_ = null;
            return;
        }

        if(this._groupBlock_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._var_ == oldChild)
        {
            setVar((PVar) newChild);
            return;
        }

        for(ListIterator<PGroupBlock> i = this._groupBlock_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PGroupBlock) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
