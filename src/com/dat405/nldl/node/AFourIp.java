/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.dat405.nldl.node;

import com.dat405.nldl.analysis.*;

@SuppressWarnings("nls")
public final class AFourIp extends PIp
{
    private TConst _seg1_;
    private TConst _seg2_;
    private TConst _seg3_;
    private TConst _seg4_;

    public AFourIp()
    {
        // Constructor
    }

    public AFourIp(
        @SuppressWarnings("hiding") TConst _seg1_,
        @SuppressWarnings("hiding") TConst _seg2_,
        @SuppressWarnings("hiding") TConst _seg3_,
        @SuppressWarnings("hiding") TConst _seg4_)
    {
        // Constructor
        setSeg1(_seg1_);

        setSeg2(_seg2_);

        setSeg3(_seg3_);

        setSeg4(_seg4_);

    }

    @Override
    public Object clone()
    {
        return new AFourIp(
            cloneNode(this._seg1_),
            cloneNode(this._seg2_),
            cloneNode(this._seg3_),
            cloneNode(this._seg4_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFourIp(this);
    }

    public TConst getSeg1()
    {
        return this._seg1_;
    }

    public void setSeg1(TConst node)
    {
        if(this._seg1_ != null)
        {
            this._seg1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._seg1_ = node;
    }

    public TConst getSeg2()
    {
        return this._seg2_;
    }

    public void setSeg2(TConst node)
    {
        if(this._seg2_ != null)
        {
            this._seg2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._seg2_ = node;
    }

    public TConst getSeg3()
    {
        return this._seg3_;
    }

    public void setSeg3(TConst node)
    {
        if(this._seg3_ != null)
        {
            this._seg3_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._seg3_ = node;
    }

    public TConst getSeg4()
    {
        return this._seg4_;
    }

    public void setSeg4(TConst node)
    {
        if(this._seg4_ != null)
        {
            this._seg4_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._seg4_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._seg1_)
            + toString(this._seg2_)
            + toString(this._seg3_)
            + toString(this._seg4_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._seg1_ == child)
        {
            this._seg1_ = null;
            return;
        }

        if(this._seg2_ == child)
        {
            this._seg2_ = null;
            return;
        }

        if(this._seg3_ == child)
        {
            this._seg3_ = null;
            return;
        }

        if(this._seg4_ == child)
        {
            this._seg4_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._seg1_ == oldChild)
        {
            setSeg1((TConst) newChild);
            return;
        }

        if(this._seg2_ == oldChild)
        {
            setSeg2((TConst) newChild);
            return;
        }

        if(this._seg3_ == oldChild)
        {
            setSeg3((TConst) newChild);
            return;
        }

        if(this._seg4_ == oldChild)
        {
            setSeg4((TConst) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
