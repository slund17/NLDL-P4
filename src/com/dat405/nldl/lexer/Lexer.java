/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.dat405.nldl.lexer;

import java.io.*;
import com.dat405.nldl.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private IPushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") final PushbackReader in)
    {
        this.in = new IPushbackReader() {

            private PushbackReader pushbackReader = in;
            
            @Override
            public void unread(int c) throws IOException {
                pushbackReader.unread(c);
            }
            
            @Override
            public int read() throws IOException {
                return pushbackReader.read();
            }
        };
    }
 
    public Lexer(@SuppressWarnings("hiding") IPushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        // int middle = (low + high) / 2;
                        int middle = (low + high) >>> 1;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            @SuppressWarnings("hiding") Token token = new26(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            new InvalidToken(this.text.substring(0, 1), start_line + 1, start_pos + 1),
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRouter(text, line, pos); }
    Token new1(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TGroup(text, line, pos); }
    Token new2(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSegment(text, line, pos); }
    Token new3(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSettings(text, line, pos); }
    Token new4(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSetting(text, line, pos); }
    Token new5(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TConnection(text, line, pos); }
    Token new6(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIpKeyword(text, line, pos); }
    Token new7(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMain(text, line, pos); }
    Token new8(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDot(line, pos); }
    Token new9(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInterfaceType(text, line, pos); }
    Token new10(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TProtocol(text, line, pos); }
    Token new11(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TConst(text, line, pos); }
    Token new12(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEqual(line, pos); }
    Token new13(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLParenthesis(line, pos); }
    Token new14(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRParenthesis(line, pos); }
    Token new15(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLBrace(line, pos); }
    Token new16(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRBrace(line, pos); }
    Token new17(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLBracket(line, pos); }
    Token new18(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRBracket(line, pos); }
    Token new19(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TArrow(line, pos); }
    Token new20(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSlash(line, pos); }
    Token new21(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSemi(text, line, pos); }
    Token new22(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TComma(text, line, pos); }
    Token new23(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBlank(text, line, pos); }
    Token new24(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TString(text, line, pos); }
    Token new25(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TComment(text, line, pos); }
    Token new26(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {12, 12, 3}, {13, 13, 4}, {32, 32, 5}, {34, 34, 6}, {40, 40, 7}, {41, 41, 8}, {44, 44, 9}, {45, 45, 10}, {46, 46, 11}, {47, 47, 12}, {48, 57, 13}, {59, 59, 14}, {61, 61, 15}, {65, 66, 16}, {67, 67, 17}, {68, 68, 18}, {69, 69, 19}, {70, 70, 20}, {71, 71, 21}, {72, 72, 16}, {73, 73, 22}, {74, 76, 16}, {77, 77, 23}, {78, 78, 16}, {79, 79, 24}, {80, 81, 16}, {82, 82, 25}, {83, 83, 26}, {84, 90, 16}, {91, 91, 27}, {93, 93, 28}, {95, 95, 29}, {97, 98, 30}, {99, 99, 31}, {100, 100, 30}, {101, 101, 32}, {102, 102, 33}, {103, 103, 34}, {104, 104, 30}, {105, 105, 35}, {106, 108, 30}, {109, 109, 36}, {110, 113, 30}, {114, 114, 37}, {115, 115, 38}, {116, 122, 30}, {123, 123, 39}, {125, 125, 40}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 9, 1}, {10, 10, 41}, {12, 32, -2}, },
            {{9, 32, -2}, },
            {{34, 34, 42}, {45, 45, 43}, {48, 57, 44}, {65, 90, 45}, {95, 95, 46}, {97, 122, 47}, },
            {},
            {},
            {},
            {{45, 45, 48}, {48, 57, 49}, {62, 62, 50}, {65, 90, 51}, {95, 95, 52}, {97, 122, 53}, },
            {},
            {{42, 42, 54}, },
            {{48, 57, 13}, },
            {},
            {},
            {{45, 57, -12}, {65, 122, -12}, },
            {{45, 57, -12}, {65, 78, 51}, {79, 79, 55}, {80, 90, 51}, {95, 95, 52}, {97, 110, 53}, {111, 111, 56}, {112, 122, 53}, },
            {{45, 57, -12}, {65, 77, 51}, {78, 78, 57}, {79, 90, 51}, {95, 122, -12}, },
            {{45, 122, -18}, },
            {{45, 122, -18}, },
            {{45, 57, -12}, {65, 81, 51}, {82, 82, 58}, {83, 90, 51}, {95, 95, 52}, {97, 113, 53}, {114, 114, 59}, {115, 122, 53}, },
            {{45, 57, -12}, {65, 79, 51}, {80, 80, 60}, {81, 82, 51}, {83, 83, 61}, {84, 90, 51}, {95, 95, 52}, {97, 111, 53}, {112, 112, 62}, {113, 122, 53}, },
            {{45, 57, -12}, {65, 65, 63}, {66, 90, 51}, {95, 95, 52}, {97, 97, 64}, {98, 122, 53}, },
            {{45, 57, -12}, {65, 82, 51}, {83, 83, 65}, {84, 95, -24}, {97, 122, 53}, },
            {{45, 78, -19}, {79, 79, 66}, {80, 110, -19}, {111, 111, 67}, {112, 122, 53}, },
            {{45, 57, -12}, {65, 68, 51}, {69, 69, 68}, {70, 90, 51}, {95, 95, 52}, {97, 100, 53}, {101, 101, 69}, {102, 122, 53}, },
            {},
            {},
            {{45, 122, -18}, },
            {{45, 122, -18}, },
            {{45, 122, -19}, },
            {{45, 122, -18}, },
            {{45, 122, -18}, },
            {{45, 122, -23}, },
            {{45, 80, -24}, {81, 90, 51}, {95, 122, -24}, },
            {{45, 122, -25}, },
            {{45, 122, -27}, },
            {{45, 122, -28}, },
            {},
            {},
            {{9, 32, -2}, },
            {},
            {{34, 122, -8}, },
            {{34, 122, -8}, },
            {{34, 122, -8}, },
            {{34, 122, -8}, },
            {{34, 122, -8}, },
            {{45, 122, -18}, },
            {{45, 122, -18}, },
            {},
            {{45, 122, -18}, },
            {{45, 122, -18}, },
            {{45, 122, -18}, },
            {{0, 41, 70}, {42, 42, 71}, {43, 65535, 70}, },
            {{45, 77, -20}, {78, 78, 72}, {79, 95, -20}, {97, 109, 53}, {110, 110, 73}, {111, 122, 53}, },
            {{45, 122, -57}, },
            {{45, 82, -26}, {83, 83, 74}, {84, 122, -26}, },
            {{45, 78, -19}, {79, 79, 75}, {80, 110, -19}, {111, 111, 76}, {112, 122, 53}, },
            {{45, 122, -60}, },
            {{45, 122, -18}, },
            {{45, 57, -12}, {65, 72, 51}, {73, 73, 77}, {74, 90, 51}, {95, 122, -12}, },
            {{45, 122, -18}, },
            {{45, 72, -63}, {73, 73, 78}, {74, 95, -63}, {97, 104, 53}, {105, 105, 79}, {106, 122, 53}, },
            {{45, 122, -65}, },
            {{45, 79, -24}, {80, 80, 80}, {81, 95, -37}, {97, 122, 53}, },
            {{45, 57, -12}, {65, 84, 51}, {85, 85, 81}, {86, 90, 51}, {95, 95, 52}, {97, 116, 53}, {117, 117, 82}, {118, 122, 53}, },
            {{45, 122, -68}, },
            {{45, 57, -12}, {65, 70, 51}, {71, 71, 83}, {72, 83, 51}, {84, 84, 84}, {85, 90, 51}, {95, 95, 52}, {97, 102, 53}, {103, 103, 85}, {104, 115, 53}, {116, 116, 86}, {117, 122, 53}, },
            {{45, 122, -70}, },
            {{0, 65535, -56}, },
            {{0, 42, -56}, {43, 46, 70}, {47, 47, 87}, {48, 65535, 70}, },
            {{45, 77, -20}, {78, 78, 88}, {79, 109, -57}, {110, 110, 89}, {111, 122, 53}, },
            {{45, 122, -74}, },
            {{45, 122, -18}, },
            {{45, 84, -68}, {85, 85, 90}, {86, 116, -68}, {117, 117, 91}, {118, 122, 53}, },
            {{45, 122, -77}, },
            {{45, 82, -26}, {83, 83, 92}, {84, 122, -26}, },
            {{45, 77, -20}, {78, 78, 93}, {79, 109, -57}, {110, 110, 94}, {111, 122, 53}, },
            {{45, 122, -80}, },
            {{45, 57, -12}, {65, 69, 51}, {70, 70, 95}, {71, 90, 51}, {95, 122, -12}, },
            {{45, 57, -12}, {65, 83, 51}, {84, 84, 96}, {85, 95, -70}, {97, 115, 53}, {116, 116, 97}, {117, 122, 53}, },
            {{45, 122, -83}, },
            {{45, 57, -12}, {65, 76, 51}, {77, 77, 98}, {78, 90, 51}, {95, 95, 52}, {97, 108, 53}, {109, 109, 99}, {110, 122, 53}, },
            {{45, 83, -83}, {84, 84, 100}, {85, 115, -83}, {116, 116, 101}, {117, 122, 53}, },
            {{45, 122, -85}, },
            {{45, 122, -86}, },
            {{0, 65535, -56}, },
            {{45, 68, -28}, {69, 69, 102}, {70, 100, -28}, {101, 101, 103}, {102, 122, 53}, },
            {{45, 122, -90}, },
            {{45, 79, -24}, {80, 80, 104}, {81, 111, -37}, {112, 112, 105}, {113, 122, 53}, },
            {{45, 122, -92}, },
            {{45, 122, -18}, },
            {{45, 122, -18}, },
            {{45, 122, -18}, },
            {{45, 122, -18}, },
            {{45, 68, -28}, {69, 69, 106}, {70, 100, -28}, {101, 101, 107}, {102, 122, 53}, },
            {{45, 122, -98}, },
            {{45, 68, -28}, {69, 69, 108}, {70, 100, -28}, {101, 101, 109}, {102, 122, 53}, },
            {{45, 122, -100}, },
            {{45, 72, -63}, {73, 73, 110}, {74, 104, -65}, {105, 105, 111}, {106, 122, 53}, },
            {{45, 122, -102}, },
            {{45, 57, -12}, {65, 66, 51}, {67, 67, 112}, {68, 90, 51}, {95, 95, 52}, {97, 98, 53}, {99, 99, 113}, {100, 122, 53}, },
            {{45, 122, -104}, },
            {{45, 122, -18}, },
            {{45, 122, -18}, },
            {{45, 81, -23}, {82, 82, 114}, {83, 113, -23}, {114, 114, 115}, {115, 122, 53}, },
            {{45, 122, -108}, },
            {{45, 77, -20}, {78, 78, 116}, {79, 109, -57}, {110, 110, 117}, {111, 122, 53}, },
            {{45, 122, -110}, },
            {{45, 77, -20}, {78, 78, 118}, {79, 109, -57}, {110, 110, 119}, {111, 122, 53}, },
            {{45, 122, -112}, },
            {{45, 83, -83}, {84, 84, 120}, {85, 115, -83}, {116, 116, 121}, {117, 122, 53}, },
            {{45, 122, -114}, },
            {{45, 122, -18}, },
            {{45, 122, -18}, },
            {{45, 83, -83}, {84, 84, 122}, {85, 115, -83}, {116, 116, 123}, {117, 122, 53}, },
            {{45, 122, -118}, },
            {{45, 70, -70}, {71, 71, 124}, {72, 90, 51}, {95, 102, -70}, {103, 103, 125}, {104, 122, 53}, },
            {{45, 122, -120}, },
            {{45, 72, -63}, {73, 73, 126}, {74, 104, -65}, {105, 105, 127}, {106, 122, 53}, },
            {{45, 122, -122}, },
            {{45, 122, -18}, },
            {{45, 122, -18}, },
            {{45, 82, -26}, {83, 83, 128}, {84, 95, -24}, {97, 114, 53}, {115, 115, 129}, {116, 122, 53}, },
            {{45, 122, -126}, },
            {{45, 78, -19}, {79, 79, 130}, {80, 110, -19}, {111, 111, 131}, {112, 122, 53}, },
            {{45, 122, -128}, },
            {{45, 122, -18}, },
            {{45, 122, -18}, },
            {{45, 77, -20}, {78, 78, 132}, {79, 109, -57}, {110, 110, 133}, {111, 122, 53}, },
            {{45, 122, -132}, },
            {{45, 122, -18}, },
            {{45, 122, -18}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {23, 23, 23, 23, 23, 23, -1, 13, 14, 22, 26, 8, 20, 11, 21, 12, 26, 26, 26, 9, 9, 9, 26, 26, 26, 26, 26, 17, 18, 26, 26, 26, 9, 9, 9, 26, 26, 26, 26, 15, 16, 23, 24, -1, -1, -1, -1, -1, 26, 26, 19, 26, 26, 26, -1, 26, 26, 26, 26, 26, 6, 26, 6, 26, 26, 26, 26, 26, 26, 26, -1, -1, 26, 26, 10, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 25, 26, 26, 26, 26, 10, 7, 7, 10, 26, 26, 26, 26, 26, 26, 26, 26, 1, 1, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, 26, 26, 26, 26, 26, 26, 2, 2, 4, 4, 26, 26, 3, 3, 26, 26, 5, 5, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
