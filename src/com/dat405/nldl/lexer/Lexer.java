/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.dat405.nldl.lexer;

import java.io.*;
import com.dat405.nldl.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.OUTSIDE;

    private IPushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") final PushbackReader in)
    {
        this.in = new IPushbackReader() {

            private PushbackReader pushbackReader = in;
            
            @Override
            public void unread(int c) throws IOException {
                pushbackReader.unread(c);
            }
            
            @Override
            public int read() throws IOException {
                return pushbackReader.read();
            }
        };
    }
 
    public Lexer(@SuppressWarnings("hiding") IPushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        // int middle = (low + high) / 2;
                        int middle = (low + high) >>> 1;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.INSIDE; break;
                            }
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.OUTSIDE; break;
                            }
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            @SuppressWarnings("hiding") Token token = new26(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.OUTSIDE; break;
                            }
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            new InvalidToken(this.text.substring(0, 1), start_line + 1, start_pos + 1),
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRouter(text, line, pos); }
    Token new1(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TGroup(text, line, pos); }
    Token new2(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSegment(text, line, pos); }
    Token new3(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSettings(text, line, pos); }
    Token new4(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSetting(text, line, pos); }
    Token new5(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TConnection(text, line, pos); }
    Token new6(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIpKeyword(text, line, pos); }
    Token new7(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMain(text, line, pos); }
    Token new8(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDot(line, pos); }
    Token new9(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInterfaceType(text, line, pos); }
    Token new10(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TProtocol(text, line, pos); }
    Token new11(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TConst(text, line, pos); }
    Token new12(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEqual(line, pos); }
    Token new13(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLParenthesis(line, pos); }
    Token new14(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRParenthesis(line, pos); }
    Token new15(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLBrace(line, pos); }
    Token new16(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRBrace(line, pos); }
    Token new17(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLBracket(line, pos); }
    Token new18(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRBracket(line, pos); }
    Token new19(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TArrow(line, pos); }
    Token new20(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSlash(line, pos); }
    Token new21(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSemi(text, line, pos); }
    Token new22(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TComma(text, line, pos); }
    Token new23(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBlank(text, line, pos); }
    Token new24(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TString(text, line, pos); }
    Token new25(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TComment(text, line, pos); }
    Token new26(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // OUTSIDE
            {{9, 9, 1}, {10, 10, 2}, {12, 12, 3}, {13, 13, 4}, {32, 32, 5}, {34, 34, 6}, {40, 40, 7}, {44, 44, 8}, {45, 45, 9}, {46, 46, 10}, {47, 47, 11}, {48, 57, 12}, {59, 59, 13}, {61, 61, 14}, {65, 66, 15}, {67, 67, 16}, {68, 68, 15}, {69, 69, 17}, {70, 70, 18}, {71, 71, 19}, {72, 72, 15}, {73, 73, 20}, {74, 76, 15}, {77, 77, 21}, {78, 78, 15}, {79, 79, 22}, {80, 81, 15}, {82, 82, 23}, {83, 83, 24}, {84, 90, 15}, {91, 91, 25}, {93, 93, 26}, {95, 95, 27}, {97, 98, 28}, {99, 99, 29}, {100, 100, 28}, {101, 101, 30}, {102, 102, 31}, {103, 103, 32}, {104, 104, 28}, {105, 105, 33}, {106, 108, 28}, {109, 109, 34}, {110, 110, 28}, {111, 111, 35}, {112, 113, 28}, {114, 114, 36}, {115, 115, 37}, {116, 122, 28}, {123, 123, 38}, {125, 125, 39}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 9, 1}, {10, 10, 40}, {12, 32, -2}, },
            {{9, 32, -2}, },
            {{34, 34, 41}, {45, 45, 42}, {48, 57, 43}, {65, 90, 44}, {95, 95, 45}, {97, 122, 46}, },
            {},
            {},
            {{45, 45, 47}, {48, 57, 48}, {62, 62, 49}, {65, 90, 50}, {95, 95, 51}, {97, 122, 52}, },
            {},
            {{42, 42, 53}, },
            {{48, 57, 12}, },
            {},
            {},
            {{45, 57, -11}, {65, 122, -11}, },
            {{45, 57, -11}, {65, 78, 50}, {79, 79, 54}, {80, 90, 50}, {95, 95, 51}, {97, 110, 52}, {111, 111, 55}, {112, 122, 52}, },
            {{45, 122, -17}, },
            {{45, 57, -11}, {65, 68, 50}, {69, 69, 56}, {70, 90, 50}, {95, 95, 51}, {97, 100, 52}, {101, 101, 57}, {102, 122, 52}, },
            {{45, 57, -11}, {65, 65, 50}, {66, 66, 58}, {67, 81, 50}, {82, 82, 59}, {83, 90, 50}, {95, 95, 51}, {97, 97, 52}, {98, 98, 60}, {99, 113, 52}, {114, 114, 61}, {115, 122, 52}, },
            {{45, 57, -11}, {65, 79, 50}, {80, 80, 62}, {81, 82, 50}, {83, 83, 63}, {84, 90, 50}, {95, 95, 51}, {97, 111, 52}, {112, 112, 64}, {113, 114, 52}, {115, 115, 65}, {116, 122, 52}, },
            {{45, 57, -11}, {65, 65, 66}, {66, 90, 50}, {95, 95, 51}, {97, 97, 67}, {98, 122, 52}, },
            {{45, 57, -11}, {65, 82, 50}, {83, 83, 68}, {84, 95, -22}, {97, 114, 52}, {115, 115, 69}, {116, 122, 52}, },
            {{45, 78, -18}, {79, 79, 70}, {80, 110, -18}, {111, 111, 71}, {112, 122, 52}, },
            {{45, 68, -20}, {69, 69, 72}, {70, 100, -20}, {101, 101, 73}, {102, 122, 52}, },
            {},
            {},
            {{45, 122, -17}, },
            {{45, 122, -17}, },
            {{45, 122, -18}, },
            {{45, 122, -17}, },
            {{45, 122, -20}, },
            {{45, 122, -21}, },
            {{45, 122, -22}, },
            {{45, 122, -23}, },
            {{45, 122, -24}, },
            {{45, 122, -25}, },
            {{45, 122, -26}, },
            {},
            {},
            {{9, 32, -2}, },
            {},
            {{34, 122, -8}, },
            {{34, 122, -8}, },
            {{34, 122, -8}, },
            {{34, 122, -8}, },
            {{34, 122, -8}, },
            {{45, 122, -17}, },
            {{45, 122, -17}, },
            {},
            {{45, 122, -17}, },
            {{45, 122, -17}, },
            {{45, 122, -17}, },
            {{0, 41, 74}, {42, 42, 75}, {43, 65535, 74}, },
            {{45, 57, -11}, {65, 77, 50}, {78, 78, 76}, {79, 90, 50}, {95, 95, 51}, {97, 109, 52}, {110, 110, 77}, {111, 122, 52}, },
            {{45, 122, -56}, },
            {{45, 122, -17}, },
            {{45, 122, -17}, },
            {{45, 122, -17}, },
            {{45, 78, -18}, {79, 79, 78}, {80, 110, -18}, {111, 111, 79}, {112, 122, 52}, },
            {{45, 122, -17}, },
            {{45, 122, -61}, },
            {{45, 122, -17}, },
            {{45, 57, -11}, {65, 72, 50}, {73, 73, 80}, {74, 90, 50}, {95, 95, 51}, {97, 104, 52}, {105, 105, 81}, {106, 122, 52}, },
            {{45, 122, -17}, },
            {{45, 122, -65}, },
            {{45, 72, -65}, {73, 73, 82}, {74, 104, -65}, {105, 105, 83}, {106, 122, 52}, },
            {{45, 122, -68}, },
            {{45, 79, -22}, {80, 80, 84}, {81, 90, 50}, {95, 111, -22}, {112, 112, 85}, {113, 122, 52}, },
            {{45, 122, -70}, },
            {{45, 57, -11}, {65, 84, 50}, {85, 85, 86}, {86, 90, 50}, {95, 95, 51}, {97, 116, 52}, {117, 117, 87}, {118, 122, 52}, },
            {{45, 122, -72}, },
            {{45, 57, -11}, {65, 70, 50}, {71, 71, 88}, {72, 83, 50}, {84, 84, 89}, {85, 90, 50}, {95, 95, 51}, {97, 102, 52}, {103, 103, 90}, {104, 115, 52}, {116, 116, 91}, {117, 122, 52}, },
            {{45, 122, -74}, },
            {{0, 65535, -55}, },
            {{0, 42, -55}, {43, 46, 74}, {47, 47, 92}, {48, 65535, 74}, },
            {{45, 77, -56}, {78, 78, 93}, {79, 109, -56}, {110, 110, 94}, {111, 122, 52}, },
            {{45, 122, -78}, },
            {{45, 84, -72}, {85, 85, 95}, {86, 116, -72}, {117, 117, 96}, {118, 122, 52}, },
            {{45, 122, -80}, },
            {{45, 82, -24}, {83, 83, 97}, {84, 114, -24}, {115, 115, 98}, {116, 122, 52}, },
            {{45, 122, -82}, },
            {{45, 77, -56}, {78, 78, 99}, {79, 109, -56}, {110, 110, 100}, {111, 122, 52}, },
            {{45, 122, -84}, },
            {{45, 57, -11}, {65, 69, 50}, {70, 70, 101}, {71, 90, 50}, {95, 95, 51}, {97, 101, 52}, {102, 102, 102}, {103, 122, 52}, },
            {{45, 122, -86}, },
            {{45, 57, -11}, {65, 83, 50}, {84, 84, 103}, {85, 95, -74}, {97, 115, 52}, {116, 116, 104}, {117, 122, 52}, },
            {{45, 122, -88}, },
            {{45, 57, -11}, {65, 76, 50}, {77, 77, 105}, {78, 90, 50}, {95, 95, 51}, {97, 108, 52}, {109, 109, 106}, {110, 122, 52}, },
            {{45, 83, -88}, {84, 84, 107}, {85, 115, -88}, {116, 116, 108}, {117, 122, 52}, },
            {{45, 122, -90}, },
            {{45, 122, -91}, },
            {{0, 65535, -55}, },
            {{45, 68, -20}, {69, 69, 109}, {70, 100, -20}, {101, 101, 110}, {102, 122, 52}, },
            {{45, 122, -95}, },
            {{45, 79, -22}, {80, 80, 111}, {81, 111, -70}, {112, 112, 112}, {113, 122, 52}, },
            {{45, 122, -97}, },
            {{45, 122, -17}, },
            {{45, 122, -17}, },
            {{45, 122, -17}, },
            {{45, 122, -17}, },
            {{45, 122, -17}, },
            {{45, 122, -17}, },
            {{45, 68, -20}, {69, 69, 113}, {70, 100, -20}, {101, 101, 114}, {102, 122, 52}, },
            {{45, 122, -105}, },
            {{45, 68, -20}, {69, 69, 115}, {70, 100, -20}, {101, 101, 116}, {102, 122, 52}, },
            {{45, 122, -107}, },
            {{45, 72, -65}, {73, 73, 117}, {74, 104, -65}, {105, 105, 118}, {106, 122, 52}, },
            {{45, 122, -109}, },
            {{45, 57, -11}, {65, 66, 50}, {67, 67, 119}, {68, 90, 50}, {95, 95, 51}, {97, 98, 52}, {99, 99, 120}, {100, 122, 52}, },
            {{45, 122, -111}, },
            {{45, 122, -17}, },
            {{45, 122, -17}, },
            {{45, 57, -11}, {65, 81, 50}, {82, 82, 121}, {83, 95, -21}, {97, 113, 52}, {114, 114, 122}, {115, 122, 52}, },
            {{45, 122, -115}, },
            {{45, 77, -56}, {78, 78, 123}, {79, 109, -56}, {110, 110, 124}, {111, 122, 52}, },
            {{45, 122, -117}, },
            {{45, 77, -56}, {78, 78, 125}, {79, 109, -56}, {110, 110, 126}, {111, 122, 52}, },
            {{45, 122, -119}, },
            {{45, 83, -88}, {84, 84, 127}, {85, 115, -88}, {116, 116, 128}, {117, 122, 52}, },
            {{45, 122, -121}, },
            {{45, 122, -17}, },
            {{45, 122, -17}, },
            {{45, 83, -88}, {84, 84, 129}, {85, 115, -88}, {116, 116, 130}, {117, 122, 52}, },
            {{45, 122, -125}, },
            {{45, 70, -74}, {71, 71, 131}, {72, 90, 50}, {95, 102, -74}, {103, 103, 132}, {104, 122, 52}, },
            {{45, 122, -127}, },
            {{45, 72, -65}, {73, 73, 133}, {74, 104, -65}, {105, 105, 134}, {106, 122, 52}, },
            {{45, 122, -129}, },
            {{45, 122, -17}, },
            {{45, 122, -17}, },
            {{45, 82, -24}, {83, 83, 135}, {84, 114, -24}, {115, 115, 136}, {116, 122, 52}, },
            {{45, 122, -133}, },
            {{45, 78, -18}, {79, 79, 137}, {80, 110, -18}, {111, 111, 138}, {112, 122, 52}, },
            {{45, 122, -135}, },
            {{45, 122, -17}, },
            {{45, 122, -17}, },
            {{45, 77, -56}, {78, 78, 139}, {79, 109, -56}, {110, 110, 140}, {111, 122, 52}, },
            {{45, 122, -139}, },
            {{45, 122, -17}, },
            {{45, 122, -17}, },
        }
        { // INSIDE
            {{9, 9, 1}, {10, 10, 2}, {12, 12, 3}, {13, 13, 4}, {32, 32, 5}, {34, 34, 6}, {41, 41, 7}, {44, 44, 8}, {45, 45, 9}, {46, 46, 10}, {47, 47, 11}, {48, 57, 12}, {59, 59, 13}, {61, 61, 14}, {67, 67, 15}, {69, 69, 16}, {70, 70, 17}, {71, 71, 18}, {73, 73, 19}, {77, 77, 20}, {79, 79, 21}, {82, 82, 22}, {83, 83, 23}, {91, 91, 24}, {93, 93, 25}, {99, 99, 26}, {101, 101, 27}, {102, 102, 28}, {103, 103, 29}, {105, 105, 30}, {109, 109, 31}, {111, 111, 32}, {114, 114, 33}, {115, 115, 34}, {123, 123, 35}, {125, 125, 36}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 9, 1}, {10, 10, 37}, {12, 32, -2}, },
            {{9, 32, -2}, },
            {{34, 34, 38}, {45, 45, 39}, {48, 57, 40}, {65, 90, 41}, {95, 95, 42}, {97, 122, 43}, },
            {},
            {},
            {{62, 62, 44}, },
            {},
            {{42, 42, 45}, },
            {{48, 57, 12}, },
            {},
            {},
            {{79, 79, 46}, {111, 111, 47}, },
            {},
            {{69, 69, 48}, {101, 101, 49}, },
            {{66, 66, 50}, {82, 82, 51}, {98, 98, 52}, {114, 114, 53}, },
            {{80, 80, 54}, {83, 83, 55}, {112, 112, 56}, {115, 115, 57}, },
            {{65, 65, 58}, {97, 97, 59}, },
            {{83, 83, 60}, {115, 115, 61}, },
            {{79, 79, 62}, {111, 111, 63}, },
            {{69, 69, 64}, {101, 101, 65}, },
            {},
            {},
            {{79, 111, -17}, },
            {},
            {{69, 101, -19}, },
            {{66, 114, -20}, },
            {{80, 115, -21}, },
            {{65, 97, -22}, },
            {{83, 115, -23}, },
            {{79, 111, -24}, },
            {{69, 101, -25}, },
            {},
            {},
            {{9, 32, -2}, },
            {},
            {{34, 122, -8}, },
            {{34, 122, -8}, },
            {{34, 122, -8}, },
            {{34, 122, -8}, },
            {{34, 122, -8}, },
            {},
            {{0, 41, 66}, {42, 42, 67}, {43, 65535, 66}, },
            {{78, 78, 68}, {110, 110, 69}, },
            {{78, 110, -48}, },
            {},
            {},
            {},
            {{79, 79, 70}, {111, 111, 71}, },
            {},
            {{79, 111, -53}, },
            {},
            {{73, 73, 72}, {105, 105, 73}, },
            {},
            {{73, 105, -57}, },
            {{73, 73, 74}, {105, 105, 75}, },
            {{73, 105, -60}, },
            {{80, 80, 76}, {112, 112, 77}, },
            {{80, 112, -62}, },
            {{85, 85, 78}, {117, 117, 79}, },
            {{85, 117, -64}, },
            {{71, 71, 80}, {84, 84, 81}, {103, 103, 82}, {116, 116, 83}, },
            {{71, 116, -66}, },
            {{0, 65535, -47}, },
            {{0, 42, -47}, {43, 46, 66}, {47, 47, 84}, {48, 65535, 66}, },
            {{78, 78, 85}, {110, 110, 86}, },
            {{78, 110, -70}, },
            {{85, 85, 87}, {117, 117, 88}, },
            {{85, 117, -72}, },
            {{83, 83, 89}, {115, 115, 90}, },
            {{83, 115, -74}, },
            {{78, 78, 91}, {110, 110, 92}, },
            {{78, 110, -76}, },
            {{70, 70, 93}, {102, 102, 94}, },
            {{70, 102, -78}, },
            {{84, 84, 95}, {116, 116, 96}, },
            {{84, 116, -80}, },
            {{77, 77, 97}, {109, 109, 98}, },
            {{84, 84, 99}, {116, 116, 100}, },
            {{77, 109, -82}, },
            {{84, 116, -83}, },
            {{0, 65535, -47}, },
            {{69, 69, 101}, {101, 101, 102}, },
            {{69, 101, -87}, },
            {{80, 80, 103}, {112, 112, 104}, },
            {{80, 112, -89}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {{69, 69, 105}, {101, 101, 106}, },
            {{69, 101, -97}, },
            {{69, 69, 107}, {101, 101, 108}, },
            {{69, 101, -99}, },
            {{73, 73, 109}, {105, 105, 110}, },
            {{73, 105, -101}, },
            {{67, 67, 111}, {99, 99, 112}, },
            {{67, 99, -103}, },
            {},
            {},
            {{82, 82, 113}, {114, 114, 114}, },
            {{82, 114, -107}, },
            {{78, 78, 115}, {110, 110, 116}, },
            {{78, 110, -109}, },
            {{78, 78, 117}, {110, 110, 118}, },
            {{78, 110, -111}, },
            {{84, 84, 119}, {116, 116, 120}, },
            {{84, 116, -113}, },
            {},
            {},
            {{84, 84, 121}, {116, 116, 122}, },
            {{84, 116, -117}, },
            {{71, 71, 123}, {103, 103, 124}, },
            {{71, 103, -119}, },
            {{73, 73, 125}, {105, 105, 126}, },
            {{73, 105, -121}, },
            {},
            {},
            {{83, 83, 127}, {115, 115, 128}, },
            {{83, 115, -125}, },
            {{79, 79, 129}, {111, 111, 130}, },
            {{79, 111, -127}, },
            {},
            {},
            {{78, 78, 131}, {110, 110, 132}, },
            {{78, 110, -131}, },
            {},
            {},
        }
    };*/

    private static int[][] accept;
/*  {
        // OUTSIDE
        {23, 23, 23, 23, 23, 23, -1, 13, 22, 26, 8, 20, 11, 21, 12, 26, 26, 9, 9, 9, 26, 26, 26, 26, 26, 17, 18, 26, 26, 26, 9, 9, 9, 26, 26, 26, 26, 26, 15, 16, 23, 24, -1, -1, -1, -1, -1, 26, 26, 19, 26, 26, 26, -1, 26, 26, 9, 9, 9, 26, 9, 26, 6, 26, 6, 26, 26, 26, 26, 26, 26, 26, 26, 26, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 25, 26, 26, 26, 26, 10, 10, 7, 7, 10, 10, 26, 26, 26, 26, 26, 26, 26, 26, 1, 1, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, 26, 26, 26, 26, 26, 26, 2, 2, 4, 4, 26, 26, 3, 3, 26, 26, 5, 5, },
        // INSIDE
        {23, 23, 23, 23, 23, 23, -1, 14, 22, -1, 8, 20, 11, 21, 12, -1, 9, 9, 9, -1, -1, -1, -1, -1, 17, 18, -1, 9, 9, 9, -1, -1, -1, -1, -1, 15, 16, 23, 24, -1, -1, -1, -1, -1, 19, -1, -1, -1, 9, 9, 9, -1, 9, -1, 6, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, 10, 10, 7, 7, 10, 10, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 2, 2, 4, 4, -1, -1, 3, 3, -1, -1, 5, 5, },

    };*/

    public static class State
    {
        public final static State OUTSIDE = new State(0);
        public final static State INSIDE = new State(1);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
