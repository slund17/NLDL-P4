/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.dat405.nldl.parser;

import com.dat405.nldl.lexer.*;
import com.dat405.nldl.node.*;
import com.dat405.nldl.analysis.*;

import java.io.*;
import java.util.*;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }


    public static Parser fromString(String code) {
        StringReader stringReader = new StringReader(code);
        PushbackReader pushbackReader = new PushbackReader(stringReader);
        return Parser.create(pushbackReader);
    }


    public static Parser create(PushbackReader pushbackReader) {
        Lexer lexer = new Lexer(pushbackReader);
        return new Parser(lexer);
    }


    public static Parser fromFile(String path) {
        File source = new File(path);
        try {
            BufferedReader bufferedReader = new BufferedReader(new FileReader(source));
            PushbackReader pushbackReader = new PushbackReader(bufferedReader, 2048);
            return create(pushbackReader);
        }catch (Exception e) {
            throw new RuntimeException(e);
        }
    }



    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprogram1Program */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAprogram2Program */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce ARouterDeviceDcl */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce ASegmentDeviceDcl */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce ARouterDcl */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce ASegmentDcl */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list);
            }
            break;
            case 6: /* reduce AAidentifierlist1IdentifierList */
            {
                ArrayList<Object> list = new6();
                push(goTo(4), list);
            }
            break;
            case 7: /* reduce AAidentifierlist2IdentifierList */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list);
            }
            break;
            case 8: /* reduce AIdentifierTail */
            {
                ArrayList<Object> list = new8();
                push(goTo(5), list);
            }
            break;
            case 9: /* reduce AAsettingdcl1SettingDcl */
            {
                ArrayList<Object> list = new9();
                push(goTo(6), list);
            }
            break;
            case 10: /* reduce AAsettingdcl2SettingDcl */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list);
            }
            break;
            case 11: /* reduce AAsettingdef1SettingDef */
            {
                ArrayList<Object> list = new11();
                push(goTo(7), list);
            }
            break;
            case 12: /* reduce AAsettingdef2SettingDef */
            {
                ArrayList<Object> list = new12();
                push(goTo(7), list);
            }
            break;
            case 13: /* reduce AIdentifierSettingStmt */
            {
                ArrayList<Object> list = new13();
                push(goTo(8), list);
            }
            break;
            case 14: /* reduce AConstantSettingStmt */
            {
                ArrayList<Object> list = new14();
                push(goTo(8), list);
            }
            break;
            case 15: /* reduce ANumConstant */
            {
                ArrayList<Object> list = new15();
                push(goTo(9), list);
            }
            break;
            case 16: /* reduce AStringConstant */
            {
                ArrayList<Object> list = new16();
                push(goTo(9), list);
            }
            break;
            case 17: /* reduce AIpConstant */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list);
            }
            break;
            case 18: /* reduce ANum */
            {
                ArrayList<Object> list = new18();
                push(goTo(10), list);
            }
            break;
            case 19: /* reduce AAgroupdcl1GroupDcl */
            {
                ArrayList<Object> list = new19();
                push(goTo(11), list);
            }
            break;
            case 20: /* reduce AAgroupdcl2GroupDcl */
            {
                ArrayList<Object> list = new20();
                push(goTo(11), list);
            }
            break;
            case 21: /* reduce AListGroupLines */
            {
                ArrayList<Object> list = new21();
                push(goTo(12), list);
            }
            break;
            case 22: /* reduce ASettingGroupLines */
            {
                ArrayList<Object> list = new22();
                push(goTo(12), list);
            }
            break;
            case 23: /* reduce AGroupGroupLines */
            {
                ArrayList<Object> list = new23();
                push(goTo(12), list);
            }
            break;
            case 24: /* reduce AConnectionGroupLines */
            {
                ArrayList<Object> list = new24();
                push(goTo(12), list);
            }
            break;
            case 25: /* reduce AAssignmentGroupLines */
            {
                ArrayList<Object> list = new25();
                push(goTo(12), list);
            }
            break;
            case 26: /* reduce AListStatement */
            {
                ArrayList<Object> list = new26();
                push(goTo(13), list);
            }
            break;
            case 27: /* reduce AIpDcl */
            {
                ArrayList<Object> list = new27();
                push(goTo(14), list);
            }
            break;
            case 28: /* reduce AConnectionAssignment */
            {
                ArrayList<Object> list = new28();
                push(goTo(15), list);
            }
            break;
            case 29: /* reduce AShortConnectionDcl */
            {
                ArrayList<Object> list = new29();
                push(goTo(16), list);
            }
            break;
            case 30: /* reduce ALongConnectionDcl */
            {
                ArrayList<Object> list = new30();
                push(goTo(16), list);
            }
            break;
            case 31: /* reduce ARrConnectionShortDcl */
            {
                ArrayList<Object> list = new31();
                push(goTo(17), list);
            }
            break;
            case 32: /* reduce ARsConnectionShortDcl */
            {
                ArrayList<Object> list = new32();
                push(goTo(17), list);
            }
            break;
            case 33: /* reduce ARouterConnector */
            {
                ArrayList<Object> list = new33();
                push(goTo(18), list);
            }
            break;
            case 34: /* reduce ALongIpThingy */
            {
                ArrayList<Object> list = new34();
                push(goTo(19), list);
            }
            break;
            case 35: /* reduce AShortIpThingy */
            {
                ArrayList<Object> list = new35();
                push(goTo(19), list);
            }
            break;
            case 36: /* reduce AIpAddress */
            {
                ArrayList<Object> list = new36();
                push(goTo(20), list);
            }
            break;
            case 37: /* reduce AOneIpShorthand */
            {
                ArrayList<Object> list = new37();
                push(goTo(21), list);
            }
            break;
            case 38: /* reduce ATwoIpShorthand */
            {
                ArrayList<Object> list = new38();
                push(goTo(21), list);
            }
            break;
            case 39: /* reduce AThreeIpShorthand */
            {
                ArrayList<Object> list = new39();
                push(goTo(21), list);
            }
            break;
            case 40: /* reduce ASinglePInterface */
            {
                ArrayList<Object> list = new40();
                push(goTo(22), list);
            }
            break;
            case 41: /* reduce ADoublePInterface */
            {
                ArrayList<Object> list = new41();
                push(goTo(22), list);
            }
            break;
            case 42: /* reduce AConnectionLongDcl */
            {
                ArrayList<Object> list = new42();
                push(goTo(23), list);
            }
            break;
            case 43: /* reduce AConnectorStatement */
            {
                ArrayList<Object> list = new43();
                push(goTo(24), list);
            }
            break;
            case 44: /* reduce ATerminal$DeviceDcl */
            {
                ArrayList<Object> list = new44();
                push(goTo(25), list);
            }
            break;
            case 45: /* reduce ANonTerminal$DeviceDcl */
            {
                ArrayList<Object> list = new45();
                push(goTo(25), list);
            }
            break;
            case 46: /* reduce ATerminal$GroupDcl */
            {
                ArrayList<Object> list = new46();
                push(goTo(26), list);
            }
            break;
            case 47: /* reduce ANonTerminal$GroupDcl */
            {
                ArrayList<Object> list = new47();
                push(goTo(26), list);
            }
            break;
            case 48: /* reduce ATerminal$SettingDcl */
            {
                ArrayList<Object> list = new48();
                push(goTo(27), list);
            }
            break;
            case 49: /* reduce ANonTerminal$SettingDcl */
            {
                ArrayList<Object> list = new49();
                push(goTo(27), list);
            }
            break;
            case 50: /* reduce ATerminal$IdentifierTail */
            {
                ArrayList<Object> list = new50();
                push(goTo(28), list);
            }
            break;
            case 51: /* reduce ANonTerminal$IdentifierTail */
            {
                ArrayList<Object> list = new51();
                push(goTo(28), list);
            }
            break;
            case 52: /* reduce ATerminal$SettingDef */
            {
                ArrayList<Object> list = new52();
                push(goTo(29), list);
            }
            break;
            case 53: /* reduce ANonTerminal$SettingDef */
            {
                ArrayList<Object> list = new53();
                push(goTo(29), list);
            }
            break;
            case 54: /* reduce ATerminal$SettingStmt */
            {
                ArrayList<Object> list = new54();
                push(goTo(30), list);
            }
            break;
            case 55: /* reduce ANonTerminal$SettingStmt */
            {
                ArrayList<Object> list = new55();
                push(goTo(30), list);
            }
            break;
            case 56: /* reduce ATerminal$GroupLines */
            {
                ArrayList<Object> list = new56();
                push(goTo(31), list);
            }
            break;
            case 57: /* reduce ANonTerminal$GroupLines */
            {
                ArrayList<Object> list = new57();
                push(goTo(31), list);
            }
            break;
            case 58: /* reduce ATerminal$ConnectorStatement */
            {
                ArrayList<Object> list = new58();
                push(goTo(32), list);
            }
            break;
            case 59: /* reduce ANonTerminal$ConnectorStatement */
            {
                ArrayList<Object> list = new59();
                push(goTo(32), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList2.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pprogramNode1 = new AProgram(listNode3, listNode4, listNode6);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList3.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pprogramNode1 = new AProgram(listNode3, listNode5, listNode7);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ARouterDeviceDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeviceDcl pdevicedclNode1;
        pdevicedclNode1 = (PDeviceDcl)nodeArrayList1.get(0);
	nodeList.add(pdevicedclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ASegmentDeviceDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeviceDcl pdevicedclNode1;
        pdevicedclNode1 = (PDeviceDcl)nodeArrayList1.get(0);
	nodeList.add(pdevicedclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ARouterDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeviceDcl pdevicedclNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pdevicedclNode1 = new ARouterDeviceDcl(listNode3);
        }
	nodeList.add(pdevicedclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ASegmentDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeviceDcl pdevicedclNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pdevicedclNode1 = new ASegmentDeviceDcl(listNode3);
        }
	nodeList.add(pdevicedclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAidentifierlist1IdentifierList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PVar pvarNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pvarNode1 = new AVar(tidentifierNode2);
        }
	if(pvarNode1 != null)
	{
	  listNode3.add(pvarNode1);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAidentifierlist2IdentifierList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PVar pvarNode1;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pvarNode1 = new AVar(tidentifierNode2);
        }
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(pvarNode1 != null)
	{
	  listNode4.add(pvarNode1);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
	nodeList.add(listNode4);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AIdentifierTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);

        pvarNode1 = new AVar(tidentifierNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAsettingdcl1SettingDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSettingDcl psettingdclNode1;
        {
            // Block
        PVar pvarNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        TIdentifier tidentifierNode3;
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pvarNode2 = new AVar(tidentifierNode3);
        }
        {
            // Block
        }

        psettingdclNode1 = new ASettingDcl(pvarNode2, listNode4);
        }
	nodeList.add(psettingdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAsettingdcl2SettingDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSettingDcl psettingdclNode1;
        {
            // Block
        PVar pvarNode2;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        TIdentifier tidentifierNode3;
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pvarNode2 = new AVar(tidentifierNode3);
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        psettingdclNode1 = new ASettingDcl(pvarNode2, listNode5);
        }
	nodeList.add(psettingdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAsettingdef1SettingDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSettingBlock psettingblockNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        psettingblockNode1 = new ASettingBlock(null, listNode4);
        }
	nodeList.add(psettingblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAsettingdef2SettingDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSettingBlock psettingblockNode1;
        {
            // Block
        TProtocol tprotocolNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tprotocolNode2 = (TProtocol)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        psettingblockNode1 = new ASettingBlock(tprotocolNode2, listNode4);
        }
	nodeList.add(psettingblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AIdentifierSettingStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PS psNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        psNode1 = new AIdentifierS(tidentifierNode2);
        }
	nodeList.add(psNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AConstantSettingStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PS psNode1;
        psNode1 = (PS)nodeArrayList1.get(0);
	nodeList.add(psNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ANumConstant */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PS psNode1;
        {
            // Block
        TConst tconstNode2;
        tconstNode2 = (TConst)nodeArrayList1.get(0);

        psNode1 = new ANumS(tconstNode2);
        }
	nodeList.add(psNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AStringConstant */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PS psNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        psNode1 = new AStringS(tstringNode2);
        }
	nodeList.add(psNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AIpConstant */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PS psNode1;
        {
            // Block
        PIp pipNode2;
        pipNode2 = (PIp)nodeArrayList1.get(0);

        psNode1 = new AIpS(pipNode2);
        }
	nodeList.add(psNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ANum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        TConst tconstNode1;
        tconstNode1 = (TConst)nodeArrayList1.get(0);
	nodeList.add(tconstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAgroupdcl1GroupDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGroupDcl pgroupdclNode1;
        {
            // Block
        PVar pvarNode2;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        TIdentifier tidentifierNode3;
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pvarNode2 = new AVar(tidentifierNode3);
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pgroupdclNode1 = new AGroupDcl(pvarNode2, listNode5);
        }
	nodeList.add(pgroupdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAgroupdcl2GroupDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGroupDcl pgroupdclNode1;
        {
            // Block
        PVar pvarNode2;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        TIdentifier tidentifierNode3;
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pvarNode2 = new AVar(tidentifierNode3);
        }
        {
            // Block
        PGroupBlock pgroupblockNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pgroupblockNode4 = (PGroupBlock)nodeArrayList4.get(0);
        listNode5 = (LinkedList)nodeArrayList5.get(0);
	if(pgroupblockNode4 != null)
	{
	  listNode6.add(pgroupblockNode4);
	}
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pgroupdclNode1 = new AGroupDcl(pvarNode2, listNode6);
        }
	nodeList.add(pgroupdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AListGroupLines */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGroupBlock pgroupblockNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pgroupblockNode1 = new AVariablesGroupBlock(listNode3);
        }
	nodeList.add(pgroupblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ASettingGroupLines */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGroupBlock pgroupblockNode1;
        {
            // Block
        PSettingBlock psettingblockNode2;
        psettingblockNode2 = (PSettingBlock)nodeArrayList2.get(0);

        pgroupblockNode1 = new ASettingGroupBlock(psettingblockNode2);
        }
	nodeList.add(pgroupblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AGroupGroupLines */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGroupBlock pgroupblockNode1;
        {
            // Block
        PGroupDcl pgroupdclNode2;
        pgroupdclNode2 = (PGroupDcl)nodeArrayList1.get(0);

        pgroupblockNode1 = new AGroupGroupBlock(pgroupdclNode2);
        }
	nodeList.add(pgroupblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AConnectionGroupLines */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGroupBlock pgroupblockNode1;
        {
            // Block
        PConnectionDcl pconnectiondclNode2;
        pconnectiondclNode2 = (PConnectionDcl)nodeArrayList1.get(0);

        pgroupblockNode1 = new AConnectionGroupBlock(pconnectiondclNode2);
        }
	nodeList.add(pgroupblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAssignmentGroupLines */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGroupBlock pgroupblockNode1;
        pgroupblockNode1 = (PGroupBlock)nodeArrayList1.get(0);
	nodeList.add(pgroupblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AListStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AIpDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGroupBlock pgroupblockNode1;
        {
            // Block
        PIp pipNode2;
        pipNode2 = (PIp)nodeArrayList2.get(0);

        pgroupblockNode1 = new AIpGroupBlock(pipNode2);
        }
	nodeList.add(pgroupblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AConnectionAssignment */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGroupBlock pgroupblockNode1;
        {
            // Block
        PVar pvarNode2;
        PConnectionDcl pconnectiondclNode4;
        {
            // Block
        TIdentifier tidentifierNode3;
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pvarNode2 = new AVar(tidentifierNode3);
        }
        pconnectiondclNode4 = (PConnectionDcl)nodeArrayList4.get(0);

        pgroupblockNode1 = new AAssGroupBlock(pvarNode2, pconnectiondclNode4);
        }
	nodeList.add(pgroupblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AShortConnectionDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConnectionDcl pconnectiondclNode1;
        pconnectiondclNode1 = (PConnectionDcl)nodeArrayList1.get(0);
	nodeList.add(pconnectiondclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ALongConnectionDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConnectionDcl pconnectiondclNode1;
        pconnectiondclNode1 = (PConnectionDcl)nodeArrayList1.get(0);
	nodeList.add(pconnectiondclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ARrConnectionShortDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConnectionDcl pconnectiondclNode1;
        {
            // Block
        PConnector pconnectorNode2;
        PConnector pconnectorNode3;
        pconnectorNode2 = (PConnector)nodeArrayList1.get(0);
        pconnectorNode3 = (PConnector)nodeArrayList3.get(0);

        pconnectiondclNode1 = new ARrConnectionDcl(pconnectorNode2, pconnectorNode3);
        }
	nodeList.add(pconnectiondclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ARsConnectionShortDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConnectionDcl pconnectiondclNode1;
        {
            // Block
        PConnector pconnectorNode2;
        PVar pvarNode3;
        pconnectorNode2 = (PConnector)nodeArrayList1.get(0);
        {
            // Block
        TIdentifier tidentifierNode4;
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);

        pvarNode3 = new AVar(tidentifierNode4);
        }

        pconnectiondclNode1 = new ARsConnectionDcl(pconnectorNode2, pvarNode3);
        }
	nodeList.add(pconnectiondclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ARouterConnector */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConnector pconnectorNode1;
        {
            // Block
        PVar pvarNode2;
        PIp pipNode4;
        TConst tconstNode5;
        PIf pifNode6;
        {
            // Block
        TIdentifier tidentifierNode3;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);

        pvarNode2 = new AVar(tidentifierNode3);
        }
        pipNode4 = (PIp)nodeArrayList3.get(0);
        tconstNode5 = (TConst)nodeArrayList5.get(0);
        pifNode6 = (PIf)nodeArrayList7.get(0);

        pconnectorNode1 = new AConnector(pvarNode2, pipNode4, tconstNode5, pifNode6);
        }
	nodeList.add(pconnectorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ALongIpThingy */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIp pipNode1;
        pipNode1 = (PIp)nodeArrayList1.get(0);
	nodeList.add(pipNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AShortIpThingy */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIp pipNode1;
        pipNode1 = (PIp)nodeArrayList1.get(0);
	nodeList.add(pipNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AIpAddress */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIp pipNode1;
        {
            // Block
        TConst tconstNode2;
        TConst tconstNode3;
        TConst tconstNode4;
        TConst tconstNode5;
        tconstNode2 = (TConst)nodeArrayList1.get(0);
        tconstNode3 = (TConst)nodeArrayList3.get(0);
        tconstNode4 = (TConst)nodeArrayList5.get(0);
        tconstNode5 = (TConst)nodeArrayList7.get(0);

        pipNode1 = new AFourIp(tconstNode2, tconstNode3, tconstNode4, tconstNode5);
        }
	nodeList.add(pipNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AOneIpShorthand */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIp pipNode1;
        {
            // Block
        TConst tconstNode2;
        tconstNode2 = (TConst)nodeArrayList2.get(0);

        pipNode1 = new AOneIp(tconstNode2);
        }
	nodeList.add(pipNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ATwoIpShorthand */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIp pipNode1;
        {
            // Block
        TConst tconstNode2;
        TConst tconstNode3;
        tconstNode2 = (TConst)nodeArrayList2.get(0);
        tconstNode3 = (TConst)nodeArrayList4.get(0);

        pipNode1 = new ATwoIp(tconstNode2, tconstNode3);
        }
	nodeList.add(pipNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AThreeIpShorthand */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIp pipNode1;
        {
            // Block
        TConst tconstNode2;
        TConst tconstNode3;
        TConst tconstNode4;
        tconstNode2 = (TConst)nodeArrayList2.get(0);
        tconstNode3 = (TConst)nodeArrayList4.get(0);
        tconstNode4 = (TConst)nodeArrayList6.get(0);

        pipNode1 = new AThreeIp(tconstNode2, tconstNode3, tconstNode4);
        }
	nodeList.add(pipNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ASinglePInterface */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIf pifNode1;
        {
            // Block
        TInterfaceType tinterfacetypeNode2;
        TConst tconstNode3;
        tinterfacetypeNode2 = (TInterfaceType)nodeArrayList1.get(0);
        tconstNode3 = (TConst)nodeArrayList2.get(0);

        pifNode1 = new AOneIf(tinterfacetypeNode2, tconstNode3);
        }
	nodeList.add(pifNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ADoublePInterface */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIf pifNode1;
        {
            // Block
        TInterfaceType tinterfacetypeNode2;
        TConst tconstNode3;
        TConst tconstNode4;
        tinterfacetypeNode2 = (TInterfaceType)nodeArrayList1.get(0);
        tconstNode3 = (TConst)nodeArrayList2.get(0);
        tconstNode4 = (TConst)nodeArrayList4.get(0);

        pifNode1 = new ATwoIf(tinterfacetypeNode2, tconstNode3, tconstNode4);
        }
	nodeList.add(pifNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AConnectionLongDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConnectionDcl pconnectiondclNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PConnector pconnectorNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pconnectorNode2 = (PConnector)nodeArrayList3.get(0);
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(pconnectorNode2 != null)
	{
	  listNode4.add(pconnectorNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pconnectiondclNode1 = new AMultiConnectionDcl(listNode4);
        }
	nodeList.add(pconnectiondclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AConnectorStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConnector pconnectorNode1;
        pconnectorNode1 = (PConnector)nodeArrayList1.get(0);
	nodeList.add(pconnectorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ATerminal$DeviceDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeviceDcl pdevicedclNode1;
        pdevicedclNode1 = (PDeviceDcl)nodeArrayList1.get(0);
	if(pdevicedclNode1 != null)
	{
	  listNode2.add(pdevicedclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ANonTerminal$DeviceDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeviceDcl pdevicedclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdevicedclNode2 = (PDeviceDcl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdevicedclNode2 != null)
	{
	  listNode3.add(pdevicedclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ATerminal$GroupDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PGroupDcl pgroupdclNode1;
        pgroupdclNode1 = (PGroupDcl)nodeArrayList1.get(0);
	if(pgroupdclNode1 != null)
	{
	  listNode2.add(pgroupdclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ANonTerminal$GroupDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PGroupDcl pgroupdclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pgroupdclNode2 = (PGroupDcl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pgroupdclNode2 != null)
	{
	  listNode3.add(pgroupdclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ATerminal$SettingDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PSettingDcl psettingdclNode1;
        psettingdclNode1 = (PSettingDcl)nodeArrayList1.get(0);
	if(psettingdclNode1 != null)
	{
	  listNode2.add(psettingdclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ANonTerminal$SettingDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PSettingDcl psettingdclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        psettingdclNode2 = (PSettingDcl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(psettingdclNode2 != null)
	{
	  listNode3.add(psettingdclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ATerminal$IdentifierTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVar pvarNode1;
        pvarNode1 = (PVar)nodeArrayList1.get(0);
	if(pvarNode1 != null)
	{
	  listNode2.add(pvarNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ANonTerminal$IdentifierTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVar pvarNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvarNode2 = (PVar)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvarNode2 != null)
	{
	  listNode3.add(pvarNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ATerminal$SettingDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PSettingBlock psettingblockNode1;
        psettingblockNode1 = (PSettingBlock)nodeArrayList1.get(0);
	if(psettingblockNode1 != null)
	{
	  listNode2.add(psettingblockNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ANonTerminal$SettingDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PSettingBlock psettingblockNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        psettingblockNode2 = (PSettingBlock)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(psettingblockNode2 != null)
	{
	  listNode3.add(psettingblockNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ATerminal$SettingStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PS psNode1;
        psNode1 = (PS)nodeArrayList1.get(0);
	if(psNode1 != null)
	{
	  listNode2.add(psNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ANonTerminal$SettingStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PS psNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        psNode2 = (PS)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(psNode2 != null)
	{
	  listNode3.add(psNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ATerminal$GroupLines */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PGroupBlock pgroupblockNode1;
        pgroupblockNode1 = (PGroupBlock)nodeArrayList1.get(0);
	if(pgroupblockNode1 != null)
	{
	  listNode2.add(pgroupblockNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ANonTerminal$GroupLines */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PGroupBlock pgroupblockNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pgroupblockNode2 = (PGroupBlock)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pgroupblockNode2 != null)
	{
	  listNode3.add(pgroupblockNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ATerminal$ConnectorStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PConnector pconnectorNode1;
        pconnectorNode1 = (PConnector)nodeArrayList1.get(0);
	if(pconnectorNode1 != null)
	{
	  listNode2.add(pconnectorNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ANonTerminal$ConnectorStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PConnector pconnectorNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pconnectorNode2 = (PConnector)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pconnectorNode2 != null)
	{
	  listNode3.add(pconnectorNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, {2, SHIFT, 2}, },
			{{-1, ERROR, 1}, {24, SHIFT, 8}, },
			{{-1, ERROR, 2}, {24, SHIFT, 8}, },
			{{-1, ERROR, 3}, {25, ACCEPT, -1}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 7}, {0, SHIFT, 1}, {1, SHIFT, 11}, {2, SHIFT, 2}, {3, SHIFT, 12}, },
			{{-1, REDUCE, 6}, {22, SHIFT, 18}, },
			{{-1, ERROR, 9}, {21, SHIFT, 21}, },
			{{-1, ERROR, 10}, {21, SHIFT, 22}, },
			{{-1, ERROR, 11}, {24, SHIFT, 23}, },
			{{-1, ERROR, 12}, {24, SHIFT, 24}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 0}, {1, SHIFT, 11}, },
			{{-1, ERROR, 17}, {1, SHIFT, 11}, {3, SHIFT, 12}, },
			{{-1, ERROR, 18}, {24, SHIFT, 28}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 7}, {22, SHIFT, 18}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 23}, {15, SHIFT, 30}, },
			{{-1, ERROR, 24}, {15, SHIFT, 31}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 1}, {1, SHIFT, 11}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 30}, {1, SHIFT, 11}, {4, SHIFT, 32}, {5, SHIFT, 33}, {6, SHIFT, 34}, {24, SHIFT, 35}, },
			{{-1, ERROR, 31}, {10, SHIFT, 47}, {11, SHIFT, 48}, {16, SHIFT, 49}, {23, SHIFT, 50}, {24, SHIFT, 51}, },
			{{-1, ERROR, 32}, {10, SHIFT, 47}, {11, SHIFT, 48}, {23, SHIFT, 50}, {24, SHIFT, 51}, },
			{{-1, ERROR, 33}, {15, SHIFT, 60}, {24, SHIFT, 61}, },
			{{-1, ERROR, 34}, {11, SHIFT, 48}, },
			{{-1, REDUCE, 6}, {13, SHIFT, 64}, {22, SHIFT, 18}, },
			{{-1, ERROR, 36}, {21, SHIFT, 65}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 40}, {1, SHIFT, 11}, {4, SHIFT, 32}, {5, SHIFT, 33}, {24, SHIFT, 35}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 43}, {21, SHIFT, 67}, },
			{{-1, ERROR, 44}, {19, SHIFT, 68}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 46}, {1, SHIFT, 11}, {4, SHIFT, 32}, {5, SHIFT, 33}, {16, SHIFT, 69}, {24, SHIFT, 35}, },
			{{-1, ERROR, 47}, {11, SHIFT, 48}, {23, SHIFT, 50}, {24, SHIFT, 51}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, {8, SHIFT, 72}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 57}, {10, SHIFT, 47}, {11, SHIFT, 48}, {16, SHIFT, 73}, {23, SHIFT, 50}, {24, SHIFT, 51}, },
			{{-1, ERROR, 58}, {11, SHIFT, 48}, {21, SHIFT, 75}, {23, SHIFT, 50}, {24, SHIFT, 51}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 60}, {24, SHIFT, 77}, },
			{{-1, ERROR, 61}, {12, SHIFT, 80}, },
			{{-1, ERROR, 62}, {8, SHIFT, 72}, },
			{{-1, ERROR, 63}, {21, SHIFT, 81}, },
			{{-1, ERROR, 64}, {8, SHIFT, 82}, {11, SHIFT, 48}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 66}, {1, SHIFT, 11}, {4, SHIFT, 32}, {5, SHIFT, 33}, {16, SHIFT, 86}, {24, SHIFT, 35}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 68}, {24, SHIFT, 87}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 71}, {11, SHIFT, 48}, {21, SHIFT, 89}, {23, SHIFT, 50}, {24, SHIFT, 51}, },
			{{-1, ERROR, 72}, {11, SHIFT, 48}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 77}, {13, SHIFT, 64}, },
			{{-1, ERROR, 78}, {21, SHIFT, 91}, },
			{{-1, ERROR, 79}, {24, SHIFT, 77}, },
			{{-1, ERROR, 80}, {5, SHIFT, 94}, {24, SHIFT, 77}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 82}, {11, SHIFT, 48}, },
			{{-1, ERROR, 83}, {20, SHIFT, 97}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 32}, {13, SHIFT, 64}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 90}, {8, SHIFT, 98}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 93}, {16, SHIFT, 99}, {24, SHIFT, 77}, },
			{{-1, ERROR, 94}, {15, SHIFT, 60}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 37}, {8, SHIFT, 101}, },
			{{-1, ERROR, 97}, {11, SHIFT, 102}, },
			{{-1, ERROR, 98}, {11, SHIFT, 48}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 101}, {11, SHIFT, 48}, },
			{{-1, ERROR, 102}, {22, SHIFT, 105}, },
			{{-1, ERROR, 103}, {8, SHIFT, 106}, },
			{{-1, REDUCE, 38}, {8, SHIFT, 107}, },
			{{-1, ERROR, 105}, {9, SHIFT, 108}, },
			{{-1, ERROR, 106}, {11, SHIFT, 48}, },
			{{-1, ERROR, 107}, {11, SHIFT, 48}, },
			{{-1, ERROR, 108}, {11, SHIFT, 48}, },
			{{-1, ERROR, 109}, {14, SHIFT, 113}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, {20, SHIFT, 114}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 114}, {11, SHIFT, 48}, },
			{{-1, REDUCE, 41}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 4}, {7, 13}, },
			{{-1, 5}, },
			{{-1, 6}, },
			{{-1, 36}, {1, 9}, {2, 10}, },
			{{-1, 19}, {20, 29}, },
			{{-1, 14}, {17, 26}, },
			{{-1, 52}, {32, 59}, {57, 74}, },
			{{-1, 53}, {58, 76}, {71, 76}, },
			{{-1, 54}, },
			{{-1, 55}, {34, 62}, {64, 62}, {72, 90}, {82, 96}, {98, 103}, {101, 104}, {106, 110}, {107, 111}, {108, 112}, {114, 115}, },
			{{-1, 37}, {7, 15}, {16, 25}, {17, 15}, {27, 25}, },
			{{-1, 38}, {46, 70}, {66, 70}, },
			{{-1, 39}, },
			{{-1, 40}, },
			{{-1, 41}, },
			{{-1, 42}, {80, 95}, },
			{{-1, 43}, },
			{{-1, 44}, {60, 78}, {68, 88}, {79, 78}, {93, 78}, },
			{{-1, 83}, },
			{{-1, 56}, {34, 63}, {64, 84}, },
			{{-1, 85}, },
			{{-1, 109}, },
			{{-1, 45}, },
			{{-1, 79}, {79, 92}, {93, 100}, },
			{{-1, 7}, },
			{{-1, 16}, {17, 27}, },
			{{-1, 17}, },
			{{-1, 20}, },
			{{-1, 57}, },
			{{-1, 58}, {47, 71}, },
			{{-1, 46}, {40, 66}, },
			{{-1, 93}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: router, segment",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: router, group, segment, settings",
			"expecting: semi, comma",
			"expecting: semi",
			"expecting: group, settings",
			"expecting: group, EOF",
			"expecting: '{'",
			"expecting: group, setting, connection, ip keyword, identifier",
			"expecting: protocol, const, '}', string, identifier",
			"expecting: protocol, const, string, identifier",
			"expecting: '{', identifier",
			"expecting: const",
			"expecting: '(', semi, comma",
			"expecting: group, setting, connection, '}', identifier",
			"expecting: group, setting, connection, identifier",
			"expecting: '->'",
			"expecting: const, string, identifier",
			"expecting: '.', const, ')', '/', semi, string, identifier",
			"expecting: const, semi, string, identifier",
			"expecting: '.', const, semi, string, identifier",
			"expecting: '='",
			"expecting: '.'",
			"expecting: '.', const",
			"expecting: group, setting, connection, '}', identifier, EOF",
			"expecting: group, setting, connection, protocol, const, '}', string, identifier",
			"expecting: '('",
			"expecting: connection, identifier",
			"expecting: '/'",
			"expecting: '(', semi",
			"expecting: '}', identifier",
			"expecting: '.', '/'",
			"expecting: comma",
			"expecting: interface type",
			"expecting: ')'",
			"expecting: const, '/', semi, string, identifier",
			"expecting: ')', '/'",
			"expecting: '->', semi",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 1, 1, 3, 6, 7, 7, 6, 1, 4, 4, 3, 3, 8, 8, 7, 6, 7, 4, 4, 9, 10, 11, 12, 13, 14, 5, 15, 15, 15, 16, 15, 15, 5, 17, 15, 15, 18, 19, 6, 20, 20, 10, 20, 20, 21, 20, 10, 20, 15, 1, 22, 23, 5, 24, 15, 15, 15, 1, 25, 15, 20, 13, 6, 10, 26, 20, 27, 5, 1, 28, 16, 13, 29, 29, 29, 25, 30, 5, 26, 23, 31, 31, 31, 8, 15, 32, 13, 13, 15, 31, 13, 33, 23, 32, 34, 13, 13, 13, 35, 36, 29, 37, 38, 13, 35, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
